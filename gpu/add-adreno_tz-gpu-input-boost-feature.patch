From 5629b6a950f940aed72a0c59095be9bb9c46029d Mon Sep 17 00:00:00 2001
From: zexceed12300 <zexceed12300@gmail.com>
Date: Mon, 30 Mar 2020 13:26:39 +0700
Subject: [PATCH] add-adreno_tz-gpu-input-boost-feature

---
 drivers/devfreq/governor_msm_adreno_tz.c | 167 ++++++++++++++++++++++-
 1 file changed, 166 insertions(+), 1 deletion(-)

diff --git a/drivers/devfreq/governor_msm_adreno_tz.c b/drivers/devfreq/governor_msm_adreno_tz.c
index 38d5a373..d5a44da9 100644
--- a/drivers/devfreq/governor_msm_adreno_tz.c
+++ b/drivers/devfreq/governor_msm_adreno_tz.c
@@ -16,6 +16,7 @@
 #include <linux/math64.h>
 #include <linux/spinlock.h>
 #include <linux/slab.h>
+#include <linux/input.h>
 #include <linux/io.h>
 #include <linux/ftrace.h>
 #include <linux/mm.h>
@@ -70,6 +71,17 @@ static void do_partner_resume_event(struct work_struct *work);
 
 static struct workqueue_struct *workqueue;
 
+static struct devfreq *tz_devfreq_g;
+static struct work_struct boost_work;
+static struct delayed_work unboost_work;
+static bool gpu_boost_running;
+
+static unsigned long boost_freq;
+module_param(boost_freq, ulong, 0644);
+
+static unsigned long boost_duration;
+module_param(boost_duration, ulong, 0644);
+
 /*
  * Returns GPU suspend time in millisecond.
  */
@@ -535,13 +547,19 @@ static int tz_handler(struct devfreq *devfreq, unsigned int event, void *data)
 					struct msm_adreno_extended_profile,
 					profile);
 	BUG_ON(devfreq == NULL);
-
+    
+	if (!tz_devfreq_g)
+		tz_devfreq_g = devfreq;
+    
 	switch (event) {
 	case DEVFREQ_GOV_START:
 		result = tz_start(devfreq);
 		break;
 
 	case DEVFREQ_GOV_STOP:
+        cancel_work_sync(&boost_work);
+		cancel_delayed_work_sync(&unboost_work);
+		tz_devfreq_g = NULL;
 		/* Queue the stop work before the TZ is stopped */
 		if (partner_gpu_profile && partner_gpu_profile->bus_devfreq)
 			queue_work(workqueue,
@@ -637,11 +655,158 @@ static struct devfreq_governor msm_adreno_tz = {
 	.event_handler = tz_handler,
 };
 
+static void gpu_update_devfreq(struct devfreq *devfreq)
+{
+	mutex_lock(&devfreq->lock);
+	update_devfreq(devfreq);
+	mutex_unlock(&devfreq->lock);
+}
+
+static void gpu_boost_worker(struct work_struct *work)
+{
+	struct devfreq *devfreq = tz_devfreq_g;
+
+	devfreq->min_freq = boost_freq;
+
+	gpu_update_devfreq(devfreq);
+
+	schedule_delayed_work(&unboost_work, msecs_to_jiffies(boost_duration));
+}
+
+static void gpu_unboost_worker(struct work_struct *work)
+{
+	struct devfreq *devfreq = tz_devfreq_g;
+
+	/* Use lowest frequency */
+	devfreq->min_freq =
+		devfreq->profile->freq_table[devfreq->profile->max_state - 1];
+
+	gpu_update_devfreq(devfreq);
+
+	gpu_boost_running = false;
+}
+
+static void gpu_ib_input_event(struct input_handle *handle,
+		unsigned int type, unsigned int code, int value)
+{
+	bool suspended;
+
+	if (!boost_freq || !boost_duration)
+		return;
+
+	if (!tz_devfreq_g)
+		return;
+
+	spin_lock(&suspend_lock);
+	suspended = suspend_start;
+	spin_unlock(&suspend_lock);
+
+	if (suspended)
+		return;
+
+	if (gpu_boost_running) {
+		if (cancel_delayed_work_sync(&unboost_work)) {
+			schedule_delayed_work(&unboost_work,
+				msecs_to_jiffies(boost_duration));
+			return;
+		}
+	}
+
+	gpu_boost_running = true;
+	queue_work(system_highpri_wq, &boost_work);
+}
+
+static int gpu_ib_input_connect(struct input_handler *handler,
+		struct input_dev *dev, const struct input_device_id *id)
+{
+	struct input_handle *handle;
+	int ret;
+
+	handle = kzalloc(sizeof(*handle), GFP_KERNEL);
+	if (!handle)
+		return -ENOMEM;
+
+	handle->dev = dev;
+	handle->handler = handler;
+	handle->name = "gpu_ib_handle";
+
+	ret = input_register_handle(handle);
+	if (ret)
+		goto err2;
+
+	ret = input_open_device(handle);
+	if (ret)
+		goto err1;
+
+	return 0;
+
+err1:
+	input_unregister_handle(handle);
+err2:
+	kfree(handle);
+	return ret;
+}
+
+static void gpu_ib_input_disconnect(struct input_handle *handle)
+{
+	input_close_device(handle);
+	input_unregister_handle(handle);
+	kfree(handle);
+}
+
+static const struct input_device_id gpu_ib_ids[] = {
+	/* multi-touch touchscreen */
+	{
+		.flags = INPUT_DEVICE_ID_MATCH_EVBIT |
+			INPUT_DEVICE_ID_MATCH_ABSBIT,
+		.evbit = { BIT_MASK(EV_ABS) },
+		.absbit = { [BIT_WORD(ABS_MT_POSITION_X)] =
+			BIT_MASK(ABS_MT_POSITION_X) |
+			BIT_MASK(ABS_MT_POSITION_Y) },
+	},
+	/* touchpad */
+	{
+		.flags = INPUT_DEVICE_ID_MATCH_KEYBIT |
+			INPUT_DEVICE_ID_MATCH_ABSBIT,
+		.keybit = { [BIT_WORD(BTN_TOUCH)] = BIT_MASK(BTN_TOUCH) },
+		.absbit = { [BIT_WORD(ABS_X)] =
+			BIT_MASK(ABS_X) | BIT_MASK(ABS_Y) },
+	},
+	/* Keypad */
+	{
+		.flags = INPUT_DEVICE_ID_MATCH_EVBIT,
+		.evbit = { BIT_MASK(EV_KEY) },
+	},
+	{ },
+};
+
+static struct input_handler gpu_ib_input_handler = {
+	.event		= gpu_ib_input_event,
+	.connect	= gpu_ib_input_connect,
+	.disconnect	= gpu_ib_input_disconnect,
+	.name		= "gpu_ib_handler",
+	.id_table	= gpu_ib_ids,
+};
+
+static void gpu_ib_init(void)
+{
+	int ret;
+
+	INIT_WORK(&boost_work, gpu_boost_worker);
+	INIT_DELAYED_WORK(&unboost_work, gpu_unboost_worker);
+
+	ret = input_register_handler(&gpu_ib_input_handler);
+	if (ret)
+		pr_err(TAG "failed to register input handler\n");
+}
+
 static int __init msm_adreno_tz_init(void)
 {
 	workqueue = create_freezable_workqueue("governor_msm_adreno_tz_wq");
 	if (workqueue == NULL)
 		return -ENOMEM;
+    
+    gpu_ib_init();
 
 	return devfreq_add_governor(&msm_adreno_tz);
 }
-- 
2.23.0

