From ba9e3d9457f483a29afacbaa471adb2fa41f6523 Mon Sep 17 00:00:00 2001
From: zexceed12300 <zexceed12300@gmail.com>
Date: Mon, 3 Aug 2020 17:51:36 +0000
Subject: [PATCH] add-cpu-voltage-control_msm8953

---
 drivers/clk/msm/clock-cpu-8953.c   | 203 +++++++++++++++++++++++++++++
 drivers/cpufreq/cpufreq.c          |  28 ++++
 drivers/regulator/Kconfig          |   7 +
 drivers/regulator/cpr3-regulator.c |  80 ++++++++++++
 4 files changed, 318 insertions(+)

diff --git a/drivers/clk/msm/clock-cpu-8953.c b/drivers/clk/msm/clock-cpu-8953.c
index 83cd88297..91f303551 100644
--- a/drivers/clk/msm/clock-cpu-8953.c
+++ b/drivers/clk/msm/clock-cpu-8953.c
@@ -39,6 +39,11 @@
 
 #include "clock.h"
 
+#ifdef CONFIG_MSM8953_CPU_VOLTAGE_CONTROL
+#include <linux/cpufreq.h>
+#include <linux/regulator/driver.h>
+#endif
+
 #define APCS_PLL_MODE		0x0
 #define APCS_PLL_L_VAL		0x8
 #define APCS_PLL_ALPHA_VAL	0x10
@@ -480,6 +485,204 @@ static struct clk *logical_cpu_to_clk(int cpu)
 	return NULL;
 }
 
+#ifdef CONFIG_MSM8953_CPU_VOLTAGE_CONTROL
+extern int cpr_regulator_get_ceiling_voltage(struct regulator *regulator,
+		int cori);
+extern int cpr_regulator_get_floor_voltage(struct regulator *regulator,
+		int cori);
+extern int cpr_regulator_get_last_voltage(struct regulator *regulator,
+		int cori);
+extern int cpr_regulator_set_ceiling_voltage(struct regulator *regulator,
+		int cori, int volt);
+extern int cpr_regulator_set_floor_voltage(struct regulator *regulator,
+		int cori, int volt);
+extern int cpr_regulator_set_last_voltage(struct regulator *regulator,
+		int cori, int volt);
+
+ssize_t cpu_clock_get_vdd(char *buf)
+{
+	ssize_t count = 0;
+	int i, uv;
+
+	if (!buf)
+		return 0;
+
+	/* Big Cluster (0 - 3) */
+	for (i = 1; i < a53_pwr_clk.c.num_fmax; i++) {
+		/* Ceiling */
+		uv = cpr_regulator_get_ceiling_voltage(
+					a53_pwr_clk.c.vdd_class->regulator[0],
+					a53_pwr_clk.c.vdd_class->vdd_uv[i]);
+		if (uv < 0)
+			return 0;
+
+		count += sprintf(buf + count, "Big_Vmax:%lumhz: %d mV\n",
+					a53_pwr_clk.c.fmax[i] / 1000000,
+					uv / 1000);
+		/* Floor */
+		uv = cpr_regulator_get_floor_voltage(
+					a53_pwr_clk.c.vdd_class->regulator[0],
+					a53_pwr_clk.c.vdd_class->vdd_uv[i]);
+		if (uv < 0)
+			return 0;
+
+		count += sprintf(buf + count, "Big_Vmin:%lumhz: %d mV\n",
+					a53_pwr_clk.c.fmax[i] / 1000000,
+					uv / 1000);
+		/* Current */
+		uv = cpr_regulator_get_last_voltage(
+					a53_pwr_clk.c.vdd_class->regulator[0],
+					a53_pwr_clk.c.vdd_class->vdd_uv[i]);
+		if (uv < 0)
+			return 0;
+
+		count += sprintf(buf + count, "Big_Vcur:%lumhz: %d mV\n",
+					a53_pwr_clk.c.fmax[i] / 1000000,
+					uv / 1000);
+	}
+
+	/* Little Cluster (4 - 7) */
+	for (i = 1; i < a53_perf_clk.c.num_fmax; i++) {
+		/* Ceiling */
+		uv = cpr_regulator_get_ceiling_voltage(
+					a53_perf_clk.c.vdd_class->regulator[0],
+					a53_perf_clk.c.vdd_class->vdd_uv[i]);
+		if (uv < 0)
+			return 0;
+
+		count += sprintf(buf + count, "Lit_Vmax:%lumhz: %d mV\n",
+					a53_perf_clk.c.fmax[i] / 1000000,
+					uv / 1000);
+		/* Floor */
+		uv = cpr_regulator_get_floor_voltage(
+					a53_perf_clk.c.vdd_class->regulator[0],
+					a53_perf_clk.c.vdd_class->vdd_uv[i]);
+		if (uv < 0)
+			return 0;
+
+		count += sprintf(buf + count, "Lit_Vmin:%lumhz: %d mV\n",
+					a53_perf_clk.c.fmax[i] / 1000000,
+					uv / 1000);
+		/* Current */
+		uv = cpr_regulator_get_last_voltage(
+					a53_perf_clk.c.vdd_class->regulator[0],
+					a53_perf_clk.c.vdd_class->vdd_uv[i]);
+		if (uv < 0)
+			return 0;
+
+		count += sprintf(buf + count, "Lit_Vcur:%lumhz: %d mV\n",
+					a53_perf_clk.c.fmax[i] / 1000000,
+					uv / 1000);
+	}
+
+	return count;
+}
+
+ssize_t cpu_clock_set_vdd(const char *buf, size_t count)
+{
+	int i, mv, ret;
+	char line[32];
+
+	if (!buf)
+		return -EINVAL;
+
+	/* Big Cluster (0 - 3) */
+	for (i = 1; i < a53_pwr_clk.c.num_fmax; i++) {
+		/* Ceiling */
+		ret = sscanf(buf, "%d", &mv);
+		if (ret != 1)
+			return -EINVAL;
+
+		ret = cpr_regulator_set_ceiling_voltage(
+					a53_pwr_clk.c.vdd_class->regulator[0],
+					a53_pwr_clk.c.vdd_class->vdd_uv[i],
+					mv * 1000);
+		if (ret < 0)
+			return ret;
+
+		ret = sscanf(buf, "%s", line);
+		buf += strlen(line) + 1;
+		/* Floor */
+		ret = sscanf(buf, "%d", &mv);
+		if (ret != 1)
+			return -EINVAL;
+
+		ret = cpr_regulator_set_floor_voltage(
+					a53_pwr_clk.c.vdd_class->regulator[0],
+					a53_pwr_clk.c.vdd_class->vdd_uv[i],
+					mv * 1000);
+		if (ret < 0)
+			return ret;
+
+		ret = sscanf(buf, "%s", line);
+		buf += strlen(line) + 1;
+		/* Current */
+		ret = sscanf(buf, "%d", &mv);
+		if (ret != 1)
+			return -EINVAL;
+
+		ret = cpr_regulator_set_last_voltage(
+					a53_pwr_clk.c.vdd_class->regulator[0],
+					a53_pwr_clk.c.vdd_class->vdd_uv[i],
+					mv * 1000);
+		if (ret < 0)
+			return ret;
+
+		ret = sscanf(buf, "%s", line);
+		buf += strlen(line) + 1;
+		
+	}
+
+	/* Little Cluster (4 - 7) */
+	for (i = 1; i < a53_perf_clk.c.num_fmax; i++) {
+		/* Ceiling */
+		ret = sscanf(buf, "%d", &mv);
+		if (ret != 1)
+			return -EINVAL;
+
+		ret = cpr_regulator_set_ceiling_voltage(
+					a53_perf_clk.c.vdd_class->regulator[0],
+					a53_perf_clk.c.vdd_class->vdd_uv[i],
+					mv * 1000);
+		if (ret < 0)
+			return ret;
+
+		ret = sscanf(buf, "%s", line);
+		buf += strlen(line) + 1;
+		/* Floor */
+		ret = sscanf(buf, "%d", &mv);
+		if (ret != 1)
+			return -EINVAL;
+
+		ret = cpr_regulator_set_floor_voltage(
+					a53_perf_clk.c.vdd_class->regulator[0],
+					a53_perf_clk.c.vdd_class->vdd_uv[i],
+					mv * 1000);
+		if (ret < 0)
+			return ret;
+
+		ret = sscanf(buf, "%s", line);
+		buf += strlen(line) + 1;
+		/* Current */
+		ret = sscanf(buf, "%d", &mv);
+		if (ret != 1)
+			return -EINVAL;
+
+		ret = cpr_regulator_set_last_voltage(
+					a53_perf_clk.c.vdd_class->regulator[0],
+					a53_perf_clk.c.vdd_class->vdd_uv[i],
+					mv * 1000);
+		if (ret < 0)
+			return ret;
+
+		ret = sscanf(buf, "%s", line);
+		buf += strlen(line) + 1;
+	}
+
+	return count;
+}
+#endif
+
 static int add_opp(struct clk *c, struct device *dev, unsigned long max_rate)
 {
 	unsigned long rate = 0;
diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index a5743f5dc..3a1f979f8 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -805,6 +805,28 @@ static ssize_t show_bios_limit(struct cpufreq_policy *policy, char *buf)
 	return sprintf(buf, "%u\n", policy->cpuinfo.max_freq);
 }
 
+#ifdef CONFIG_MSM8953_CPU_VOLTAGE_CONTROL
+extern ssize_t cpu_clock_get_vdd(char *buf);
+extern ssize_t cpu_clock_set_vdd(const char *buf, size_t count);
+
+static bool enable_voltage_control = true;
+module_param(enable_voltage_control, bool, 0664);
+
+static ssize_t show_UV_mV_table(struct cpufreq_policy *policy, char *buf)
+{
+	return cpu_clock_get_vdd(buf);
+}
+
+static ssize_t store_UV_mV_table(struct cpufreq_policy *policy,
+	const char *buf, size_t count)
+{
+	if (!enable_voltage_control)
+		return pr_info("CPU Voltage control is disabled.\n");	
+
+	return cpu_clock_set_vdd(buf, count);
+}
+#endif
+
 cpufreq_freq_attr_ro_perm(cpuinfo_cur_freq, 0400);
 cpufreq_freq_attr_ro(cpuinfo_min_freq);
 cpufreq_freq_attr_ro(cpuinfo_max_freq);
@@ -819,6 +841,9 @@ cpufreq_freq_attr_rw(scaling_min_freq);
 cpufreq_freq_attr_rw(scaling_max_freq);
 cpufreq_freq_attr_rw(scaling_governor);
 cpufreq_freq_attr_rw(scaling_setspeed);
+#ifdef CONFIG_MSM8953_CPU_VOLTAGE_CONTROL
+cpufreq_freq_attr_rw(UV_mV_table);
+#endif
 
 static struct attribute *default_attrs[] = {
 	&cpuinfo_min_freq.attr,
@@ -832,6 +857,9 @@ static struct attribute *default_attrs[] = {
 	&scaling_driver.attr,
 	&scaling_available_governors.attr,
 	&scaling_setspeed.attr,
+#ifdef CONFIG_MSM8953_CPU_VOLTAGE_CONTROL
+	&UV_mV_table.attr,
+#endif
 	NULL
 };
 
diff --git a/drivers/regulator/Kconfig b/drivers/regulator/Kconfig
index c0c380c3b..3536f387e 100644
--- a/drivers/regulator/Kconfig
+++ b/drivers/regulator/Kconfig
@@ -827,6 +827,13 @@ config REGULATOR_CPR
 	  to voltage value before writing to a voltage regulator API, such as
 	  that provided by spm-regulator driver.
 
+config MSM8953_CPU_VOLTAGE_CONTROL
+	bool "MSM8953 CPU voltage control"
+	depends on REGULATOR_CPR3
+	default n
+	help
+	  Enable CPU voltage control for MSM8953, based flar2 voltage control driver.
+
 config REGULATOR_CPR2_GFX
 	bool "RBCPR regulator driver for GFX"
 	depends on OF
diff --git a/drivers/regulator/cpr3-regulator.c b/drivers/regulator/cpr3-regulator.c
index ba354472a..c9b3ab8c1 100644
--- a/drivers/regulator/cpr3-regulator.c
+++ b/drivers/regulator/cpr3-regulator.c
@@ -4145,6 +4145,86 @@ static struct regulator_ops cpr3_regulator_ops = {
 	.list_corner_voltage	= cpr3_regulator_list_corner_voltage,
 };
 
+#ifdef CONFIG_MSM8953_CPU_VOLTAGE_CONTROL
+int cpr_regulator_get_ceiling_voltage(struct regulator *regulator,
+		int cori)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count)
+		return cpr_vreg->corner[cori].ceiling_volt;
+
+	return -EINVAL;
+}
+
+int cpr_regulator_get_floor_voltage(struct regulator *regulator,
+		int cori)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count)
+		return cpr_vreg->corner[cori].floor_volt;
+
+	return -EINVAL;
+}
+
+int cpr_regulator_get_last_voltage(struct regulator *regulator,
+		int cori)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count)
+		return cpr_vreg->corner[cori].last_volt;
+
+	return -EINVAL;
+}
+
+int cpr_regulator_set_ceiling_voltage(struct regulator *regulator,
+		int cori, int volt)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count) {
+		mutex_lock(&cpr_vreg->thread->ctrl->lock);
+		cpr_vreg->corner[cori].ceiling_volt = volt;
+		mutex_unlock(&cpr_vreg->thread->ctrl->lock);
+		return 0;
+	}
+
+	return -EINVAL;
+}
+
+int cpr_regulator_set_floor_voltage(struct regulator *regulator,
+		int cori, int volt)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count) {
+		mutex_lock(&cpr_vreg->thread->ctrl->lock);
+		cpr_vreg->corner[cori].floor_volt = volt;
+		mutex_unlock(&cpr_vreg->thread->ctrl->lock);
+		return 0;
+	}
+
+	return -EINVAL;
+}
+
+int cpr_regulator_set_last_voltage(struct regulator *regulator,
+		int cori, int volt)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count) {
+		mutex_lock(&cpr_vreg->thread->ctrl->lock);
+		cpr_vreg->corner[cori].last_volt = volt;
+		mutex_unlock(&cpr_vreg->thread->ctrl->lock);
+		return 0;
+	}
+
+	return -EINVAL;
+}
+#endif
+
 /**
  * cprh_regulator_get_voltage() - get the voltage corner for the CPR3 regulator
  *			associated with the regulator device
-- 
2.25.0

